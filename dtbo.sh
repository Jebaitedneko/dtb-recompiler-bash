# dtb recompiler
# TG: @mochi_wwww / GIT: Jebaitedneko
MATCH="VAYU"
if [ $(env | grep ANDROID_DATA | wc -c) -gt 0 ]; then
	if [ ! -d "/cache/py3" ]; then
		mkdir -p /cache/py3
		unzip -q py3.zip -d /cache/py3
		PYTHON="/cache/py3/bin/python"
	fi
	if [ ! -d "/cache/dtc" ]; then
		mkdir -p /cache/dtc
		unzip -q dtc.zip -d /cache/dtc
		DTC="/cache/dtc/bin/dtc -q"
	fi
else
	PYTHON=$(which python)
	DTC="$(which dtc) -q"
fi
[[ ! -f dtbo-stock.img ]] && echo -e "Run\n\n\nsu\n\nsh img.sh\n\nexit\n\n\nand then re-run run-dtbo.sh" && exit
chmod +x dtb.py && $PYTHON dtb.py dtbo-stock.img && mv dtb dtbs
mv "$(grep "$MATCH" dtbs/*.dtb -l)" "./dtb" && rm -rf dtbs
$DTC -I dtb -O dts -o dts dtb && rm dtb
cp dts dts.old

function label() {
	sed -i "s/$1 {/$2: $1 {/g" "dts"
}

echo -e "\n" >> dts

function get_frag_num() {
	FRAG_NUM=$(grep -B4 $1 dts | tail -n5 | head -n1 | grep -oE '[0-9]+')
}

TEMPLATE="
__local_fixups__ {
	fragment@FRAG_NUM {
		__overlay__ {
			NODE_NAME {
				PROP;
			};
		};
	};
};
"

function push_node() {
	get_frag_num $1
	FIXUP=$(echo $TEMPLATE | sed "s/FRAG_NUM/$FRAG_NUM/g;s/NODE_NAME/$1/g;s/PROP/$(echo -e $2)/g")
	echo -e "/ { $FIXUP };" >> dts
}

push_node "qcom,mdss_dsi_j20s_36_02_0a_dsc_video" '
	qcom,esd-check-enabled;
	qcom,mdss-dsi-panel-status-check-mode = "reg_read";
	qcom,mdss-dsi-panel-status-command = [06 01 00 01 00 00 01 0a];
	qcom,mdss-dsi-panel-status-command-state = "dsi_lp_mode";
	qcom,mdss-dsi-panel-status-value = <0x9c>;
	qcom,mdss-dsi-panel-status-read-length = <1>;
'

push_node "qcom,mdss_dsi_j20s_42_02_0b_dsc_video" '
	qcom,esd-check-enabled;
	qcom,mdss-dsi-panel-status-check-mode = "reg_read";
	qcom,mdss-dsi-panel-status-command = [06 01 00 01 00 00 01 0a];
	qcom,mdss-dsi-panel-status-command-state = "dsi_lp_mode";
	qcom,mdss-dsi-panel-status-value = <0x9c>;
	qcom,mdss-dsi-panel-status-read-length = <1>;
'

sed -i "s/;;/;/g" "dts"
$DTC -I dts -O dtb -o "dtb" "dts"
$DTC -I dtb -O dts -o "dts.new" "dtb"
if grep -Fxq avbtool dtbo-stock.img; then
	echo
else
	echo "Your dtbo has AVB enabled."
	echo "It is preferred to do the following via fastboot:"
	echo "fastboot --disable-verity --disable-verification flash vbmeta vbmeta.img"
	echo "then"
	echo "fastboot --disable-verity --disable-verification flash vbmeta_system vbmeta_system.img"
	echo "where vbmeta.img and vbmeta_system.img are blank vbmeta (provided below)"
	echo "https://github.com/Jebaitedneko/dtb-recompiler-bash#disabled-vbmetas"
	echo "Afterwards, you can flash the dtbo-mod.zip as normal."
fi
echo "Done."
echo -e "\nAutogenerated from dtbo-recompiler\nby MOCHI [TG: @mochi_wwww | GIT: @Jebaitedneko]\n" >> banner
echo -e "$(diff -ur dts.old dts.new)" >> banner && rm dts.old dts.new dts
chmod +x mkdtboimg.py && $PYTHON mkdtboimg.py create dtbo.img --page_size=4096 dtb && rm dtb
rm -rf /cache/dtc /cache/py3